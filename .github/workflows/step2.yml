name: CI Pipeline - Step 2

on:
  workflow_run:
    workflows: ["CI Pipeline - Step 1"]
    types:
      - completed
  issue_comment:
    types: [created]

jobs:
  run_on_workflow_a_success:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Run on workflow A success
        run: echo "Workflow A completes successfully"
  
  download_context_artifact:
    runs-on: ubuntu-latest
    steps:
      - name: 'Download artifact'
        uses: actions/github-script@v6
        with:
          script: |
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: context.payload.workflow_run.id,
            });
            
            let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "env_vars.txt"
            })[0];
            
            let download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            
            let fs = require('fs');
            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/env_vars.txt.zip`, Buffer.from(download.data));
            
      - name: 'Unzip artifact'
        run: unzip env_vars.txt.zip

      - name: 'Return Parsed JSON'
        uses: actions/github-script@v6
        id: return-parsed-json
        with:
          script: |
            let fs = require('fs');
            let data = fs.readFileSync('./env_vars.txt');
            return JSON.parse(data);
            
    outputs:
        property_one: ${{fromJSON(steps.return-parsed-json.outputs.result).prop_1}}
        property_two: ${{fromJSON(steps.return-parsed-json.outputs.result).prop_2}}
  
  log_context_values:
    needs:
      - download_context_artifact
    runs-on: ubuntu-latest
    steps:
      - name: 'Log Context Values'
        run: |
          echo "${{ needs.download_context_artifact.outputs.property_one }}"
          echo "${{ needs.download_context_artifact.outputs.property_two }}"
  
  handle_comment:
    runs-on: ubuntu-latest
    steps:
    - name: Check if Comment Contains TDV Selection
      id: check_comment
      run: |
        comment_body="${{ github.event.comment.body }}"
        echo "Comment body: $comment_body"
        if [[ "$comment_body" == /select*tdv* ]]; then
          tdv_env=$(echo "$comment_body" | sed 's/\/select tdv //')
          echo "TDV_ENV=$tdv_env" >> $GITHUB_ENV
        else
          echo "Not a valid TDV selection comment."
          exit 1
        fi
    

    - name: Print Selected TDV Environment
      if: steps.check_comment.outcome == 'success'
      run: |
        echo "Selected TDV Environment: ${{ env.TDV_ENV }}"

    - name: Set Environment Variables
      run: |
        case "${{ github.event.inputs.git_branch }}" in
          dev)
            echo "ACCOUNT_NUMBER=215132885729" >> $GITHUB_ENV
            echo "ENV=dev" >> $GITHUB_ENV
            echo "TDV_SERVICE_ACCOUNT_NAME_1=SVT_DATAOPS_DEV" >> $GITHUB_ENV
            echo "TDV_SERVICE_ACCOUNT_NAME_2=SVT_DATAOPS_DEV" >> $GITHUB_ENV
            echo "TDV_SERVICE_ACCOUNT_NAME_3=SVT_DATAOPS_INT" >> $GITHUB_ENV
            ;;
          test)
            echo "ACCOUNT_NUMBER=883528617975" >> $GITHUB_ENV
            echo "ENV=test" >> $GITHUB_ENV
            echo "TDV_SERVICE_ACCOUNT_NAME_1=SVT_DATAOPS_UAT" >> $GITHUB_ENV
            echo "TDV_SERVICE_ACCOUNT_NAME_2=SVT_DATAOPS_UAT" >> $GITHUB_ENV
            echo "TDV_SERVICE_ACCOUNT_NAME_3=SVT_DATAOPS_UAT" >> $GITHUB_ENV
            ;;
          main)
            echo "ACCOUNT_NUMBER=160989692528" >> $GITHUB_ENV
            echo "ENV=prod" >> $GITHUB_ENV
            echo "TDV_SERVICE_ACCOUNT_NAME_1=SVT_DATAOPS_PRD" >> $GITHUB_ENV
            echo "TDV_SERVICE_ACCOUNT_NAME_2=" >> $GITHUB_ENV
            echo "TDV_SERVICE_ACCOUNT_NAME_3=" >> $GITHUB_ENV
            ;;
          *)
            echo "ACCOUNT_NUMBER=215132885729" >> $GITHUB_ENV
            echo "ENV=dev" >> $GITHUB_ENV
            echo "TDV_SERVICE_ACCOUNT_NAME_1=SVT_DATAOPS_DEV" >> $GITHUB_ENV
            echo "TDV_SERVICE_ACCOUNT_NAME_2=SVT_DATAOPS_DEV" >> $GITHUB_ENV
            echo "TDV_SERVICE_ACCOUNT_NAME_3=SVT_DATAOPS_INT" >> $GITHUB_ENV
            ;;
        esac

    - name: Print Environment Variables
      run: |
        echo "SOLUTION_BRANCH: ${{ github.event.inputs.git_branch }}"
        echo "TDV_ENV: ${{ github.event.inputs.tdv_environment }}"
        echo "ACCOUNT_NUMBER: ${{ env.ACCOUNT_NUMBER }}"
        echo "ENV: ${{ env.ENV }}"
        echo "TDV_SERVICE_ACCOUNT_NAME_1: ${{ env.TDV_SERVICE_ACCOUNT_NAME_1 }}"
        echo "TDV_SERVICE_ACCOUNT_NAME_2: ${{ env.TDV_SERVICE_ACCOUNT_NAME_2 }}"
        echo "TDV_SERVICE_ACCOUNT_NAME_3: ${{ env.TDV_SERVICE_ACCOUNT_NAME_3 }}"
